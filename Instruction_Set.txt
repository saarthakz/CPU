Instruction Set:
  0: MW   regA, regB             -> regA = RAM[regB]
  1: LW   reg, imm8/addr         -> reg = imm8/RAM[addr]
  2: SW   addr/regA, imm8/regB   -> RAM[addr/regA] = regB/imm8
  3: JNZ  imm8/reg addr          -> imm8/reg != 0 ? PC = addr : PC+1
  4: IN  reg/addr, 0x0           -> reg/RAM[addr] = User Input
  5: OUT reg/addr, 0x0           -> Output = reg/RAM[addr]
  6: ADD regA, imm8/regB         -> regA = regA + imm8/regB
  7: SUB regA, imm8/regB         -> regA = regA - imm8/regB
  8: MUL regA, imm8/regB         -> regA = regA * imm8/regB
  9: DIV regA, imm8/regB         -> regA = regA / imm8/regB
  A: MOD regA, imm8/regB         -> regA = regA % imm8/regB
  B: AND  regA, imm8/regB        -> regA = regA & imm8/regB
  C: OR   regA, imm8/regB        -> regA = regA | imm8/regB
  D: NOT  regA, imm8/regB        -> regA = ~(imm8/regB)
  E: CMP regA, imm8/regB         -> regA = regA == imm8/regB

Prefix:
  # -> Immediate : 35
  & -> Address   : 38
  @ -> Register  : 64

Syntax:
  Opcode:Op1,Op2;
  Operands need to be in Big Endian Format: Hex: [AB CD] base 16 is read as CD AB base 16 

  NOTE: For IN, OUT, first operand is an address, second operand MUST be #0 always

  NOTE FOR JUMP: Each Ith Assembly Instruction is at Address: 4000 + (7 * I) 

Boundaries:
  Addresses & Immediate values can only be in the range of [0,65535]

Each Instruction is 7 Bytes long
